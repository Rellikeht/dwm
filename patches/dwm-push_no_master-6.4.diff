diff --git a/dwm.c b/dwm.c
index e5efb6a..660a8ac 100644
--- a/dwm.c
+++ b/dwm.c
@@ -186,7 +186,10 @@ static void motionnotify(XEvent *e);
 static void movemouse(const Arg *arg);
 static Client *nexttiled(Client *c);
 static void pop(Client *c);
+static Client *prevtiled(Client *c);
 static void propertynotify(XEvent *e);
+static void pushdown(const Arg *arg);
+static void pushup(const Arg *arg);
 static void quit(const Arg *arg);
 static Monitor *recttomon(int x, int y, int w, int h);
 static void resize(Client *c, int x, int y, int w, int h, int interact);
@@ -1209,6 +1212,15 @@ pop(Client *c)
 	arrange(c->mon);
 }
 
+Client *
+prevtiled(Client *c) {
+	Client *p, *r;
+
+	for(p = nexttiled(selmon->clients), r = NULL; p && p != c; p = nexttiled(p->next)) {
+		 r = p;}
+	return r;
+}
+
 void
 propertynotify(XEvent *e)
 {
@@ -1246,6 +1259,55 @@ propertynotify(XEvent *e)
 	}
 }
 
+void
+pushdown(const Arg *arg) {
+	Client *sel = selmon->sel, *untouchable = nexttiled(selmon->clients), *c;
+	int i = 0;
+
+	if(!sel || sel->isfloating || !ISVISIBLE(sel) || !untouchable)
+		return;
+	for (; i < selmon->nmaster;i++) {//+master_area; i++) {
+		untouchable = nexttiled(untouchable->next);
+		if (!untouchable)
+			break;
+	}
+	if((c = nexttiled(sel->next)) && c != untouchable) {
+		detach(sel);
+		sel->next = c->next;
+		c->next = sel;
+	}
+	focus(sel);
+	arrange(selmon);
+}
+
+void
+pushup(const Arg *arg) {
+	Client *sel = selmon->sel, *untouchable = nexttiled(selmon->clients), *c;
+	int i = 0;
+
+	if(!sel || sel->isfloating || !ISVISIBLE(sel) || !untouchable || untouchable == sel)
+		return;
+	if (selmon->nmaster <= 0)
+		untouchable = NULL;
+	for (;i < selmon->nmaster-1; i++) {
+		untouchable = nexttiled(untouchable->next);
+		if (!untouchable)
+			break;
+	}
+	if((c = prevtiled(sel)) && c != untouchable) {
+		detach(sel);
+		sel->next = c;
+		if (c == selmon->clients)
+			selmon->clients = sel;
+		else {
+			for (c = selmon->clients; c->next != sel->next; c = c->next);
+			c->next = sel;
+		}
+	}
+	focus(sel);
+	arrange(selmon);
+}
+
 void
 quit(const Arg *arg)
 {
